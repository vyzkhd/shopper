{"version":3,"sources":["Nav.js","Item.jsx","ItemPage.js","static-data.js","CartPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","activeTab","onTabChange","itemClass","tabName","className","onClick","Item","item","children","name","description","price","ItemPage","items","onAddToCart","map","key","id","CartPage","onAddOne","onRemoveOne","count","protoTypes","PropTypes","array","isRequired","func","summarizeCart","cart","groupedItems","reduce","summary","toFixed","Object","values","Content","tab","onRemoveItem","App","useState","setActiveTab","setCart","prevCart","index","findIndex","i","copy","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f36812d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Nav = ({ activeTab, onTabChange }) => {\n  const itemClass = (tabName) =>\n    `App-nav-item ${activeTab === tabName ? \"selected\" : \"\"}`;\n\n  return (\n    <nav className=\"App-nav\">\n      <ul>\n        <li className={itemClass(\"items\")}>\n          <button onClick={() => onTabChange(\"items\")}>Items</button>\n        </li>\n        <li className={itemClass(\"cart\")}>\n          <button onClick={() => onTabChange(\"cart\")}>Cart</button>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Item.css\";\n\nconst Item = ({ item, children }) => {\n  return (\n    <div className=\"Item\">\n      <div className=\"Item-left\">\n        <div className=\"Item-image\" />\n        <div className=\"Item-title\">{item.name}</div>\n        <div className=\"Item-description\">{item.description}</div>\n      </div>\n      <div className=\"Item-right\">\n        <div className=\"Item-price\">â‚¹{item.price}</div>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nItem.propTypes = {\n  item: PropTypes.object.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Item;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./ItemPage.css\";\nimport Item from \"./Item\";\n\nfunction ItemPage({ items, onAddToCart }) {\n  return (\n    <ul className=\"ItemPage-items\">\n      {items.map((item) => (\n        <li key={item.id} className=\"ItemPage-item\">\n          <Item item={item}>\n            <button\n              className=\"Item-addToCart\"\n              onClick={() => onAddToCart(item)}\n            >\n              Add to Cart\n            </button>\n          </Item>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nItemPage.propTypes = {\n  items: PropTypes.array.isRequired,\n  onAddToCart: PropTypes.func.isRequired,\n};\n\nexport default ItemPage;\n","let items = [\n  {\n    id: 0,\n    name: \"Maggi\",\n    description:\n      \"Maggi Masala is perfectly convenient for any snacking occasion\",\n    price: 80.0,\n  },\n  {\n    id: 1,\n    name: \"Pepsi\",\n    description: \"Carbonated soft drink manufactured by PepsiCo.\",\n    price: 69.99,\n  },\n  {\n    id: 2,\n    name: \"Apple 11 Pro\",\n    description: \"Best phone in the world.\",\n    price: 98799.0,\n  },\n  {\n    id: 3,\n    name: \"Lays\",\n    description:\n      \"Lay's is the brand name for a number of potato chip varieties\",\n    price: 40.0,\n  },\n  {\n    id: 4,\n    name: \"Faber Castell Pitt Artist Color Pen\",\n    description:\n      \"Faber-Castell is one of the world's largest and oldest manufacturers of pens, pencils\",\n    price: 371.0,\n  },\n];\n\nexport { items };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Item from \"./Item\";\nimport \"./CartPage.css\";\n\nfunction CartPage({ items, onAddOne, onRemoveOne }) {\n  return (\n    <ul className=\"CartPage-items\">\n      {items.map((item) => (\n        <li key={item.id} className=\"CartPage-item\">\n          <Item item={item}>\n            <div className=\"CartItem-controls\">\n              <button\n                className=\"CartItem-removeOne\"\n                onClick={() => onRemoveOne(item)}\n              >\n                -\n              </button>\n              <span className=\"CartItem-count\">{item.count}</span>\n              <button\n                className=\"CartItem-addOne\"\n                onClick={() => onAddOne(item)}\n              >\n                +\n              </button>\n            </div>\n          </Item>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nCartPage.protoTypes = {\n  items: PropTypes.array.isRequired,\n  onAddOne: PropTypes.func.isRequired,\n  onRemoveOne: PropTypes.func.isRequired,\n};\n\nexport default CartPage;\n","import React, { useState } from \"react\";\nimport Nav from \"./Nav\";\nimport \"./App.css\";\nimport ItemPage from \"./ItemPage\";\nimport { items } from \"./static-data\";\nimport CartPage from \"./CartPage\";\n\nconst summarizeCart = (cart) => {\n  const groupedItems = cart.reduce((summary, item) => {\n    summary[item.id] = summary[item.id] || {\n      ...item,\n      count: 0,\n    };\n    summary[item.id].count++;\n    summary[item.id].price = (\n      summary[item.id].price * summary[item.id].count\n    ).toFixed(2);\n    return summary;\n  }, {});\n  return Object.values(groupedItems);\n};\n\nconst App = () => {\n  const [activeTab, setActiveTab] = useState(\"items\");\n  const [cart, setCart] = useState([]);\n\n  const addToCart = (item) => {\n    setCart((prevCart) => [...prevCart, item]);\n  };\n\n  const removeItem = (item) => {\n    let index = cart.findIndex((i) => i.id === item.id);\n    if (index >= 0) {\n      setCart((cart) => {\n        const copy = [...cart];\n        copy.splice(index, 1);\n        return copy;\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Nav activeTab={activeTab} onTabChange={setActiveTab} />\n      <main className=\"App-content\">\n        <Content\n          tab={activeTab}\n          onAddToCart={addToCart}\n          onRemoveItem={removeItem}\n          cart={summarizeCart(cart)}\n        />\n      </main>\n    </div>\n  );\n};\n\nconst Content = ({ tab, onAddToCart, onRemoveItem, cart }) => {\n  switch (tab) {\n    case \"items\":\n      return <ItemPage items={items} onAddToCart={onAddToCart} />;\n    case \"cart\":\n      return (\n        <CartPage\n          items={cart}\n          onAddOne={onAddToCart}\n          onRemoveOne={onRemoveItem}\n        />\n      );\n    default:\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}